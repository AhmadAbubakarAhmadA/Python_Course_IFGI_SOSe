# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MuensterCityDistrictToolsDialog
                                 A QGIS plugin
 Query and export MÃ¼nster district data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-06-13
        git sha              : $Format:%H$
        copyright            : (C) 2025 by PIQAA
        email                : Ahmadahmadhafeeez@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.core import QgsProject
from .district_profile_dialog import DistrictProfileDialog
from .export_dialog import ExportDialog

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'muendistricttools_dialog_base.ui'))


class MuensterCityDistrictToolsDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(MuensterCityDistrictToolsDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        # connect button signals to slots
        self.btnprofile.clicked.connect(self.show_district_profile)
        self.btExport.clicked.connect(self.show_export_options)
        
    def get_selected_district_features(self):
        """
        Get the currently selected features from the district layer
        
        :return: List of selected features, or None if layer not found
        """
        # first, let's check all available layers for debugging
        all_layers = [layer.name() for layer in QgsProject.instance().mapLayers().values()]
        print(f"Available layers: {all_layers}")
        
        district_layers = QgsProject.instance().mapLayersByName('Muenster_City_Districts')
        if not district_layers:
            QMessageBox.critical(
                self,
                "Layer Not Found",
                f"Muenster_City_Districts layer not found in the project.\nAvailable layers: {', '.join(all_layers)}"
            )
            return None
            
        district_layer = district_layers[0]
        selected_features = district_layer.selectedFeatures()
        
        # debug information
        print(f"Layer found: {district_layer.name()}")
        print(f"Total features in layer: {district_layer.featureCount()}")
        print(f"Selected features count: {len(selected_features)}")
        
        return selected_features
        
    def show_district_profile(self):
        """Show the district profile dialog"""
        selected_features = self.get_selected_district_features()
        
        if selected_features is None:
            return
            
        # check if no features are selected
        if len(selected_features) == 0:
            QMessageBox.warning(
                self,
                "No Selection",
                "At least one feature has to be selected.\n\nTo select:\n1. Make sure 'Muenster_City_Districts' layer is active\n2. Use the 'Select Features' tool (F6)\n3. Click on a district in the map\n4. Try again"
            )
            return
            
        # check if more than one feature is selected
        if len(selected_features) > 1:
            QMessageBox.warning(
                self,
                "Multiple Selection",
                "Only one feature can be selected at a time."
            )
            return
            
        # show profile dialog for the selected feature
        profile_dialog = DistrictProfileDialog(self)
        profile_dialog.set_district_data(selected_features[0])
        profile_dialog.exec_()
        
    def show_export_options(self):
        """Show the export options dialog"""
        selected_features = self.get_selected_district_features()
        
        if selected_features is None:
            return
            
        # check if no features are selected
        if len(selected_features) == 0:
            QMessageBox.warning(
                self,
                "No Selection",
                "At least one feature has to be selected.\n\nTo select:\n1. Make sure 'Muenster_City_Districts' layer is active\n2. Use the 'Select Features' tool (F6)\n3. Click on a district in the map\n4. Try again"
            )
            return
            
        # show export dialog
        export_dialog = ExportDialog(selected_features, self)
        export_dialog.exec_()
